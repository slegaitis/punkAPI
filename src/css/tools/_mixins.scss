$mainprefixes: -webkit-, -moz-;
$allprefixes: -webkit-, -moz-, -o-;

@mixin perspective($value) {
	@each $prefix in $mainprefixes {
		#{$prefix}-perspective: $value;
	}
	perspective: $value;
}

@mixin perspective-origin($x-value, $y-value) {
	@each $prefix in $mainprefixes {
		#{$prefix}-perspective-origin: $x-value $y-value;
	}
	perspective-origin: $x-value $y-value;
}

// Angles mixin
@mixin angle($pseudo, $flip: false, $angle: 1.5deg) {
	// Possible values for $pseudo are: before, after, both
	@if $pseudo == "before" or $pseudo == "after" or $pseudo == "both" {
		position: relative;
		z-index: 1;
		$selector: if($pseudo == "both", "&:before,&:after", "&:#{$pseudo}");

		#{$selector} {
			background: inherit;
			content: "";
			display: block;
			height: 50%;
			left: 0;
			position: absolute;
			right: 0;
			z-index: -1;
			-webkit-backface-visibility: hidden; // for Chrome Windows
		}

		@if $pseudo == "before" {
			#{$selector} {
				top: 0;

				@if $flip {
					transform: skewY($angle * -1);
					transform-origin: 0 0;
				} @else {
					transform: skewY($angle);
					transform-origin: 100% 0;
				}
			}
		}

		@if $pseudo == "after" {
			#{$selector} {
				bottom: 0;

				@if $flip {
					transform: skewY($angle);
					transform-origin: 0 100%;
				} @else {
					transform: skewY($angle * -1);
					transform-origin: 100%;
				}
			}
		}

		@if $pseudo == "both" {
			&:before {
				top: 0;

				@if $flip {
					transform: skewY($angle * -1);
					transform-origin: 0 0;
				} @else {
					transform: skewY($angle);
					transform-origin: 100% 0;
				}
			}

			&:after {
				bottom: 0;

				@if $flip {
					transform: skewY($angle);
					transform-origin: 0 0;
				} @else {
					transform: skewY($angle * -1);
					transform-origin: 100%;
				}
			}
		}
	}
}

@mixin transition($property, $timing, $effect) {
	@each $allprefix in $allprefixes {
		#{$allprefix}transition: $property $timing $effect;
	}
	transition: $property $timing $effect;
}

@mixin delayed-transition($property, $timing, $effect, $delay) {
	@each $allprefix in $allprefixes {
		#{$allprefix}transition: $property $timing $effect $delay;
	}
	transition: $property $timing $effect $delay;
}

@mixin background-rgba($color, $opacity) {
	background: $color;
	background: rgba($color, $opacity);
}

@mixin transform-scale($amount) {
	@each $prefix in $mainprefixes {
		#{$prefix}-transform: scale($amount);
	}
	-webkit-backface-visibility: hidden; /* Chrome, Safari, Opera */
	backface-visibility: hidden;
	transform: scale($amount);
}

%form-resets {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	border: 0;
	border-radius: 0;
	outline: none;
}

@mixin gradient-vertical($top, $bottom) {
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top, $top 0%, $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(
		linear,
		left top,
		left bottom,
		color-stop(0%, $top),
		color-stop(100%, $bottom)
	); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(
		top,
		$top 0%,
		$bottom 100%
	); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, $top 0%, $bottom 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, $top 0%, $bottom 100%); /* IE10+ */
	background: linear-gradient(to bottom, $top 0%, $bottom 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$top}', endColorstr='#{$bottom}',GradientType=0 ); /* IE6-9 */
}

@mixin gradient-topdiagonal($top, $bottom) {
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(-45deg, $top 0%, $bottom 100%); /* FF3.6+ */
	background: -webkit-gradient(
		linear,
		left top,
		right bottom,
		color-stop(0%, $bottom),
		color-stop(100%, $top)
	); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(
		-45deg,
		$top 0%,
		$bottom 100%
	); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(
		-45deg,
		$top 0%,
		$bottom 100%
	); /* Opera 11.10+ */
	background: -ms-linear-gradient(-45deg, $top 0%, $bottom 100%); /* IE10+ */
	background: linear-gradient(135deg, $top 0%, $bottom 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$top}', endColorstr='#{$bottom}',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

@mixin gradient-bottomdiagonal($bottom, $top) {
	background: $bottom; /* Old browsers */
	background: -moz-linear-gradient(-45deg, $bottom 0%, $top 100%); /* FF3.6+ */
	background: -webkit-gradient(
		linear,
		left top,
		right bottom,
		color-stop(0%, $top),
		color-stop(100%, $top)
	); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(
		-45deg,
		$bottom 0%,
		$top 100%
	); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(
		-45deg,
		$bottom 0%,
		$top 100%
	); /* Opera 11.10+ */
	background: -ms-linear-gradient(-45deg, $bottom 0%, $top 100%); /* IE10+ */
	background: linear-gradient(135deg, $bottom 0%, $top 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$bottom}', endColorstr='#{$top}',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
}

@mixin gradient-horizontal($left, $right) {
	background: $left; /* Old browsers */
	background: -moz-linear-gradient(left, $left 0%, $right 100%); /* FF3.6+ */
	background: -webkit-gradient(
		linear,
		left top,
		right top,
		color-stop(0%, $left),
		color-stop(100%, $right)
	); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(
		left,
		$left 0%,
		$right 100%
	); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(
		left,
		$left 0%,
		$right 100%
	); /* Opera 11.10+ */
	background: -ms-linear-gradient(left, $left 0%, $right 100%); /* IE10+ */
	background: linear-gradient(to right, $left 0%, $right 100%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$left}', endColorstr='#{$right}',GradientType=1 ); /* IE6-9 */
}

@mixin gradient-horizontal-fade($left, $right) {
	background: -moz-linear-gradient(left, $left 0%, $right 100%); /* FF3.6+ */
	background: -webkit-gradient(
		linear,
		left top,
		right top,
		color-stop(0%, $left),
		color-stop(100%, $right)
	); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(
		left,
		$left 0%,
		$right 100%
	); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(
		left,
		$left 0%,
		$right 100%
	); /* Opera 11.10+ */
	background: -ms-linear-gradient(left, $left 0%, $right 100%); /* IE10+ */
	background: linear-gradient(to right, $left 0%, $right 100%); /* W3C */
}

@mixin button($bg, $color) {
	background: $bg;
	color: $color;
	line-height: 1em;
	padding: 8px 10px 8px;
	text-align: center;
	text-decoration: none;

	@include transition(all, 0.2s, linear);

	&:hover {
		@if lightness($bg) > 50% {
			background: darken($bg, 10%);
			color: $color;
		} @else {
			background: lighten($bg, 10%);
			color: $color;
		}
	}
}

@mixin ribbon($bg, $borderwidth, $color) {
	background: $bg;
	color: $color;

	&:after {
		border-left: 0px solid;
		border-right: $borderwidth solid rgba(0, 0, 0, 0);
		border-bottom: $borderwidth solid $bg;
		border-top: $borderwidth solid $bg;
		content: " ";
		display: block;
		position: absolute;
		right: -#{$borderwidth};
		top: 0;
	}
}

@mixin triangle($size, $color, $direction) {
	height: 0;
	width: 0;

	@if ($direction == up) or
		($direction == down) or
		($direction == right) or
		($direction == left)
	{
		border-color: transparent;
		border-style: solid;
		border-width: $size / 2;

		@if $direction == up {
			border-bottom-color: $color;
		} @else if $direction == right {
			border-left-color: $color;
		} @else if $direction == down {
			border-top-color: $color;
		} @else if $direction == left {
			border-right-color: $color;
		}
	} @else if ($direction == up-right) or ($direction == up-left) {
		border-top: $size solid $color;

		@if $direction == up-right {
			border-left: $size solid transparent;
		} @else if $direction == up-left {
			border-right: $size solid transparent;
		}
	} @else if ($direction == down-right) or ($direction == down-left) {
		border-bottom: $size solid $color;

		@if $direction == down-right {
			border-left: $size solid transparent;
		} @else if $direction == down-left {
			border-right: $size solid transparent;
		}
	}
}

//USE @extend %group; instead if you can!
@mixin group() {
	*zoom: 1;
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin breakpoint($point) {
	@if $point == large-mobile {
		@media only screen and (min-width: #{$large-mobile}) {
			@content;
		}
	}

	@if $point == tablet {
		@media only screen and (min-width: #{$tablet}) {
			@content;
		}
	} @else if $point == desktop {
		@media only screen and (min-width: #{$desktop}) {
			@content;
		}
	} @else if $point == large-desktop {
		@media only screen and (min-width: #{$large-desktop}) {
			@content;
		}
	} @else if $point == xxl-desktop {
		@media only screen and (min-width: #{$xxl-desktop}) {
			@content;
		}
	}
}

@mixin rotate($degrees, $ms-rotate) {
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
	-webkit-transform: rotate(#{$degrees}deg);
	-moz-transform: rotate(#{$degrees}deg);
	-ms-transform: rotate(#{$degrees}deg);
	-o-transform: rotate(#{$degrees}deg);
	transform: rotate(#{$degrees}deg);
	filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$ms-rotate});
	*zoom: 1;
}

@mixin opacity($opacity) {
	-webkit-backface-visibility: hidden; /* Chrome, Safari, Opera */
	backface-visibility: hidden;
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}
